# https://taskfile.dev

version: "3"
silent: true
output: "prefixed"

set: [pipefail]
shopt: [globstar]

vars:
  STAGES:
    - 0-toolchain
    - 1-kernel

  CONTAINER_BUILDER: '{{ .CONTAINER_BUILDER | default "podman" }}'
  NETWORK_NAME: icaros
  DAEMON_CONTAINER_NAME: icaros-buildkitd
  REGISTRY_CONTAINER_NAME: icaros-registry
  REGISTRY_PORT: "{{.REGISTRY_PORT|default 5000}}"
  PUSH_FLAGS: '{{if (eq .CONTAINER_BUILDER "podman")}}--tls-verify=false{{end}}'

tasks:
  create-network:
    internal: true
    run: once
    cmds:
      - "{{ .CONTAINER_BUILDER }} network create {{.NETWORK_NAME}}"
    status:
      - "{{ .CONTAINER_BUILDER }} network inspect {{.NETWORK_NAME}}"

  start-buildkitd:
    internal: true
    run: once
    deps:
      - create-network
    cmds:
      - |-
        {{ .CONTAINER_BUILDER }} run -d --pull=missing \
        --network {{.NETWORK_NAME}} \
        --name {{ .DAEMON_CONTAINER_NAME }} \
        --privileged \
        --volume ./buildkitd.toml:/etc/buildkitd.toml:ro \
        moby/buildkit:latest \
          --config=/etc/buildkitd.toml
    status:
      - "{{ .CONTAINER_BUILDER }} container inspect {{ .DAEMON_CONTAINER_NAME }} | jq -e '.[0].State.Running'"

  start-registry:
    internal: true
    run: once
    deps:
      - create-network
    cmds:
      - |-
        {{ .CONTAINER_BUILDER }} run -d --pull=missing \
        --network {{.NETWORK_NAME}} \
        --name {{ .REGISTRY_CONTAINER_NAME }} \
        -p {{.REGISTRY_PORT}}:5000 \
        registry:3
    status:
      - "{{ .CONTAINER_BUILDER }} container inspect {{ .REGISTRY_CONTAINER_NAME }} | jq -e '.[0].State.Running'"

  # Each stage is expected to output an image with the name "icaros/{{.NAME}}:latest"
  build:*:
    vars:
      NAME: "{{ index .MATCH 0 }}"
      OUTPUT_NAME_CONTAINER: "{{.REGISTRY_CONTAINER_NAME}}:{{.REGISTRY_PORT}}/icaros/{{ .NAME }}:latest"
      OUTPUT_NAME_LOCAL: "localhost:{{.REGISTRY_PORT}}/icaros/{{ .NAME }}:latest"

      EXPORT_CACHE: '{{if (env "GITHUB_ACTIONS")}}"type=gha"{{else}}"type=inline"{{end}}'
      IMPORT_CACHE: '{{if (env "GITHUB_ACTIONS")}}"type=gha"{{else}}"type=registry,ref={{.OUTPUT_NAME_CONTAINER}}"{{end}}'
    label: build:{{ .NAME }}
    prefix: build:{{ .NAME }}
    deps:
      - start-buildkitd
      - start-registry
    sources:
      - stages/{{.NAME}}/**
    cmds:
      - |-
        buildctl \
          --addr={{ .CONTAINER_BUILDER }}-container://{{ .DAEMON_CONTAINER_NAME }} \
          build \
          --frontend gateway.v0 \
          --opt filename=Containerfile \
          --opt source=docker/dockerfile:1.17 \
          --export-cache {{.EXPORT_CACHE}} \
          --import-cache {{.IMPORT_CACHE}} \
          --local context=stages/{{ .NAME }} \
          --local dockerfile=stages/{{ .NAME }} \
          --output type=docker,\"name={{.OUTPUT_NAME_CONTAINER}},{{.OUTPUT_NAME_LOCAL}}\",push=true \
            | {{ .CONTAINER_BUILDER }} load
      - |-
        {{.CONTAINER_BUILDER}} push \
          {{.PUSH_FLAGS}} \
          {{.OUTPUT_NAME_LOCAL}}

  build:
    cmds:
      - for:
          var: STAGES
        task: build:{{ .ITEM }}

  test:
    aliases:
      - default
    deps:
      - build
    cmds:
      - "{{ .CONTAINER_BUILDER }} run --rm {{.REGISTRY_CONTAINER_NAME}}:5000/icaros/{{last .STAGES}}:latest"

  clean:
    cmds:
      - rm -r .task || true
